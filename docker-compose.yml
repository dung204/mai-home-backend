services:
  api:
    container_name: api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always
    build: .
    ports:
      - '${APP_PORT:-4000}:${APP_PORT:-4000}'
    networks:
      - network
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:${APP_PORT:-4000}/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-unaccent.sql:/docker-entrypoint-initdb.d/init-unaccent.sql
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS=--locale-provider=icu --icu-locale=vi
      - TZ=Asia/Ho_Chi_Minh
    restart: unless-stopped
    networks:
      - network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE_NAME} -h localhost']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:7.0-alpine
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}', '--appendonly', 'yes']
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}

    volumes:
      - minio_data:/data
    command: server --console-address ":${MINIO_CONSOLE_PORT:-9001}" /data
    restart: unless-stopped
    networks:
      - network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  createbuckets:
    container_name: createbuckets
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      /usr/bin/mc mb myminio/${MINIO_BUCKET:-mai-home} --ignore-existing;
      /usr/bin/mc policy set public myminio/${MINIO_BUCKET:-mai-home};
      exit 0;
      "
    networks:
      - network

  nginx:
    container_name: nginx
    image: nginx:1.25-alpine
    ports:
      - '443:443'
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./cert:/etc/certs
    depends_on:
      - api
    networks:
      - network
    restart: unless-stopped

networks:
  network:
    driver: bridge

volumes:
  postgresql_data:
  redis_data:
  minio_data:
